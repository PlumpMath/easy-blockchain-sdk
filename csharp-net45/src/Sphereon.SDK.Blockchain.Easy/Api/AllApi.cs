/* 
 * Easy Blockchain API
 *
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is an expensive operation.  2. Store entries on the chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Blockchain.Easy.Client;
using Sphereon.SDK.Blockchain.Easy.Model;

namespace Sphereon.SDK.Blockchain.Easy.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAllApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>IdResponse</returns>
        IdResponse ChainIdExists (string chainId);

        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> ChainIdExistsWithHttpInfo (string chainId);
        /// <summary>
        /// Create a new chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>CommittedChainResponse</returns>
        CommittedChainResponse CreateChain (Chain chain);

        /// <summary>
        /// Create a new chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>ApiResponse of CommittedChainResponse</returns>
        ApiResponse<CommittedChainResponse> CreateChainWithHttpInfo (Chain chain);
        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>CommittedEntryResponse</returns>
        CommittedEntryResponse CreateEntry (string chainId, Entry entry);

        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>ApiResponse of CommittedEntryResponse</returns>
        ApiResponse<CommittedEntryResponse> CreateEntryWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>IdResponse</returns>
        IdResponse DetermineChainId (Chain chain, bool? checkExistence = null);

        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> DetermineChainIdWithHttpInfo (Chain chain, bool? checkExistence = null);
        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>IdResponse</returns>
        IdResponse DetermineEntryId (string chainId, Entry entry, bool? checkExistence = null);

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> DetermineEntryIdWithHttpInfo (string chainId, Entry entry, bool? checkExistence = null);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse EntryById (string chainId, string entryId);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> EntryByIdWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse EntryByRequest (string chainId, Entry entry);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> EntryByRequestWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>IdResponse</returns>
        IdResponse EntryIdExists (string chainId, string entryId);

        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> EntryIdExistsWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse LastEntry (string chainId);

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> LastEntryWithHttpInfo (string chainId);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse NextEntryById (string chainId, string entryId);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> NextEntryByIdWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse NextEntryByRequest (string chainId, Entry entry);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> NextEntryByRequestWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse PreviousEntryById (string chainId, string entryId);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> PreviousEntryByIdWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse PreviousEntryByRequest (string chainId, Entry entry);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> PreviousEntryByRequestWithHttpInfo (string chainId, Entry entry);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> ChainIdExistsAsync (string chainId);

        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> ChainIdExistsAsyncWithHttpInfo (string chainId);
        /// <summary>
        /// Create a new chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>Task of CommittedChainResponse</returns>
        System.Threading.Tasks.Task<CommittedChainResponse> CreateChainAsync (Chain chain);

        /// <summary>
        /// Create a new chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>Task of ApiResponse (CommittedChainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommittedChainResponse>> CreateChainAsyncWithHttpInfo (Chain chain);
        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of CommittedEntryResponse</returns>
        System.Threading.Tasks.Task<CommittedEntryResponse> CreateEntryAsync (string chainId, Entry entry);

        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of ApiResponse (CommittedEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommittedEntryResponse>> CreateEntryAsyncWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> DetermineChainIdAsync (Chain chain, bool? checkExistence = null);

        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> DetermineChainIdAsyncWithHttpInfo (Chain chain, bool? checkExistence = null);
        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> DetermineEntryIdAsync (string chainId, Entry entry, bool? checkExistence = null);

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> DetermineEntryIdAsyncWithHttpInfo (string chainId, Entry entry, bool? checkExistence = null);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByIdAsync (string chainId, string entryId);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByIdAsyncWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByRequestAsync (string chainId, Entry entry);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByRequestAsyncWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> EntryIdExistsAsync (string chainId, string entryId);

        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> EntryIdExistsAsyncWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> LastEntryAsync (string chainId);

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> LastEntryAsyncWithHttpInfo (string chainId);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByIdAsync (string chainId, string entryId);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByIdAsyncWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByRequestAsync (string chainId, Entry entry);

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByRequestAsyncWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByIdAsync (string chainId, string entryId);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByIdAsyncWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByRequestAsync (string chainId, Entry entry);

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByRequestAsyncWithHttpInfo (string chainId, Entry entry);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AllApi : IAllApi
    {
        private Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AllApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AllApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AllApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AllApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>IdResponse</returns>
        public IdResponse ChainIdExists (string chainId)
        {
             ApiResponse<IdResponse> localVarResponse = ChainIdExistsWithHttpInfo(chainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse< IdResponse > ChainIdExistsWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->ChainIdExists");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id/{chainId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChainIdExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> ChainIdExistsAsync (string chainId)
        {
             ApiResponse<IdResponse> localVarResponse = await ChainIdExistsAsyncWithHttpInfo(chainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Determine whether the Id of a chain exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> ChainIdExistsAsyncWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->ChainIdExists");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id/{chainId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChainIdExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Create a new chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>CommittedChainResponse</returns>
        public CommittedChainResponse CreateChain (Chain chain)
        {
             ApiResponse<CommittedChainResponse> localVarResponse = CreateChainWithHttpInfo(chain);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>ApiResponse of CommittedChainResponse</returns>
        public ApiResponse< CommittedChainResponse > CreateChainWithHttpInfo (Chain chain)
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling AllApi->CreateChain");

            var localVarPath = "/blockchain/easy/0.1.0/chains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chain != null && chain.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chain; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedChainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedChainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedChainResponse)));
            
        }

        /// <summary>
        /// Create a new chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>Task of CommittedChainResponse</returns>
        public async System.Threading.Tasks.Task<CommittedChainResponse> CreateChainAsync (Chain chain)
        {
             ApiResponse<CommittedChainResponse> localVarResponse = await CreateChainAsyncWithHttpInfo(chain);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <returns>Task of ApiResponse (CommittedChainResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommittedChainResponse>> CreateChainAsyncWithHttpInfo (Chain chain)
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling AllApi->CreateChain");

            var localVarPath = "/blockchain/easy/0.1.0/chains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chain != null && chain.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chain; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedChainResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedChainResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedChainResponse)));
            
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>CommittedEntryResponse</returns>
        public CommittedEntryResponse CreateEntry (string chainId, Entry entry)
        {
             ApiResponse<CommittedEntryResponse> localVarResponse = CreateEntryWithHttpInfo(chainId, entry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>ApiResponse of CommittedEntryResponse</returns>
        public ApiResponse< CommittedEntryResponse > CreateEntryWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->CreateEntry");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->CreateEntry");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedEntryResponse)));
            
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of CommittedEntryResponse</returns>
        public async System.Threading.Tasks.Task<CommittedEntryResponse> CreateEntryAsync (string chainId, Entry entry)
        {
             ApiResponse<CommittedEntryResponse> localVarResponse = await CreateEntryAsyncWithHttpInfo(chainId, entry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of ApiResponse (CommittedEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommittedEntryResponse>> CreateEntryAsyncWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->CreateEntry");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->CreateEntry");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedEntryResponse)));
            
        }

        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>IdResponse</returns>
        public IdResponse DetermineChainId (Chain chain, bool? checkExistence = null)
        {
             ApiResponse<IdResponse> localVarResponse = DetermineChainIdWithHttpInfo(chain, checkExistence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse< IdResponse > DetermineChainIdWithHttpInfo (Chain chain, bool? checkExistence = null)
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling AllApi->DetermineChainId");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (checkExistence != null) localVarQueryParams.Add("checkExistence", Configuration.ApiClient.ParameterToString(checkExistence)); // query parameter
            if (chain != null && chain.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chain; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetermineChainId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> DetermineChainIdAsync (Chain chain, bool? checkExistence = null)
        {
             ApiResponse<IdResponse> localVarResponse = await DetermineChainIdAsyncWithHttpInfo(chain, checkExistence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pre determine the Id of a chain request without anchoring it in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chain">Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network!</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> DetermineChainIdAsyncWithHttpInfo (Chain chain, bool? checkExistence = null)
        {
            // verify the required parameter 'chain' is set
            if (chain == null)
                throw new ApiException(400, "Missing required parameter 'chain' when calling AllApi->DetermineChainId");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (checkExistence != null) localVarQueryParams.Add("checkExistence", Configuration.ApiClient.ParameterToString(checkExistence)); // query parameter
            if (chain != null && chain.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(chain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chain; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetermineChainId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>IdResponse</returns>
        public IdResponse DetermineEntryId (string chainId, Entry entry, bool? checkExistence = null)
        {
             ApiResponse<IdResponse> localVarResponse = DetermineEntryIdWithHttpInfo(chainId, entry, checkExistence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse< IdResponse > DetermineEntryIdWithHttpInfo (string chainId, Entry entry, bool? checkExistence = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->DetermineEntryId");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->DetermineEntryId");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (checkExistence != null) localVarQueryParams.Add("checkExistence", Configuration.ApiClient.ParameterToString(checkExistence)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetermineEntryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> DetermineEntryIdAsync (string chainId, Entry entry, bool? checkExistence = null)
        {
             ApiResponse<IdResponse> localVarResponse = await DetermineEntryIdAsyncWithHttpInfo(chainId, entry, checkExistence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <param name="checkExistence">Check whether the id exists (optional, default to false)</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> DetermineEntryIdAsyncWithHttpInfo (string chainId, Entry entry, bool? checkExistence = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->DetermineEntryId");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->DetermineEntryId");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (checkExistence != null) localVarQueryParams.Add("checkExistence", Configuration.ApiClient.ParameterToString(checkExistence)); // query parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetermineEntryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse EntryById (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = EntryByIdWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > EntryByIdWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->EntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->EntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByIdAsync (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await EntryByIdAsyncWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByIdAsyncWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->EntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->EntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse EntryByRequest (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = EntryByRequestWithHttpInfo(chainId, entry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > EntryByRequestWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->EntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->EntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByRequestAsync (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await EntryByRequestAsyncWithHttpInfo(chainId, entry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByRequestAsyncWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->EntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->EntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>IdResponse</returns>
        public IdResponse EntryIdExists (string chainId, string entryId)
        {
             ApiResponse<IdResponse> localVarResponse = EntryIdExistsWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse< IdResponse > EntryIdExistsWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->EntryIdExists");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->EntryIdExists");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryIdExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> EntryIdExistsAsync (string chainId, string entryId)
        {
             ApiResponse<IdResponse> localVarResponse = await EntryIdExistsAsyncWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Determine whether the Id of an entry exists in the blockchain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> EntryIdExistsAsyncWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->EntryIdExists");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->EntryIdExists");

            var localVarPath = "/blockchain/easy/0.1.0/chains/id/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryIdExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse LastEntry (string chainId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = LastEntryWithHttpInfo(chainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > LastEntryWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->LastEntry");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> LastEntryAsync (string chainId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await LastEntryAsyncWithHttpInfo(chainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the last entry in the provided chain. This is the most recent entry also called the chain head 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> LastEntryAsyncWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->LastEntry");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse NextEntryById (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = NextEntryByIdWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > NextEntryByIdWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->NextEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->NextEntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByIdAsync (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await NextEntryByIdAsyncWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByIdAsyncWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->NextEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->NextEntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse NextEntryByRequest (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = NextEntryByRequestWithHttpInfo(chainId, entry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > NextEntryByRequestWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->NextEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->NextEntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> NextEntryByRequestAsync (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await NextEntryByRequestAsyncWithHttpInfo(chainId, entry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry after the supplied entry Id (the next) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> NextEntryByRequestAsyncWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->NextEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->NextEntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NextEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse PreviousEntryById (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = PreviousEntryByIdWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > PreviousEntryByIdWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->PreviousEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->PreviousEntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByIdAsync (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await PreviousEntryByIdAsyncWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByIdAsyncWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->PreviousEntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling AllApi->PreviousEntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse PreviousEntryByRequest (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = PreviousEntryByRequestWithHttpInfo(chainId, entry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > PreviousEntryByRequestWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->PreviousEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->PreviousEntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> PreviousEntryByRequestAsync (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await PreviousEntryByRequestAsyncWithHttpInfo(chainId, entry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entry before the supplied entry Id (the previous) in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> PreviousEntryByRequestAsyncWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling AllApi->PreviousEntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling AllApi->PreviousEntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviousEntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

    }
}
