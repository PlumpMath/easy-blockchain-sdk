/* 
 * Easy Blockchain API
 *
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a chain has been created using the /chain POST endpoint. Normaly you only need one or a handfull of chains. This is an expensive operation.  2. Store entries on the chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Blockchain.Easy.Client;
using Sphereon.SDK.Blockchain.Easy.Model;

namespace Sphereon.SDK.Blockchain.Easy.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntryDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>CommittedEntryResponse</returns>
        CommittedEntryResponse CreateEntryUsingPOST (string chainId, Entry entry);

        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>ApiResponse of CommittedEntryResponse</returns>
        ApiResponse<CommittedEntryResponse> CreateEntryUsingPOSTWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>IdResponse</returns>
        IdResponse DetermineEntryId (string chainId, Entry entry);

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>ApiResponse of IdResponse</returns>
        ApiResponse<IdResponse> DetermineEntryIdWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse EntryById (string chainId, string entryId);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> EntryByIdWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        AnchoredEntryResponse EntryByRequest (string chainId, Entry entry);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        ApiResponse<AnchoredEntryResponse> EntryByRequestWithHttpInfo (string chainId, Entry entry);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of CommittedEntryResponse</returns>
        System.Threading.Tasks.Task<CommittedEntryResponse> CreateEntryUsingPOSTAsync (string chainId, Entry entry);

        /// <summary>
        /// Create a new entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of ApiResponse (CommittedEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommittedEntryResponse>> CreateEntryUsingPOSTAsyncWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>Task of IdResponse</returns>
        System.Threading.Tasks.Task<IdResponse> DetermineEntryIdAsync (string chainId, Entry entry);

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResponse>> DetermineEntryIdAsyncWithHttpInfo (string chainId, Entry entry);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByIdAsync (string chainId, string entryId);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByIdAsyncWithHttpInfo (string chainId, string entryId);
        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByRequestAsync (string chainId, Entry entry);

        /// <summary>
        /// Get an existing entry in the provided chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByRequestAsyncWithHttpInfo (string chainId, Entry entry);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntryDataApi : IEntryDataApi
    {
        private Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntryDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntryDataApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntryDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntryDataApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>CommittedEntryResponse</returns>
        public CommittedEntryResponse CreateEntryUsingPOST (string chainId, Entry entry)
        {
             ApiResponse<CommittedEntryResponse> localVarResponse = CreateEntryUsingPOSTWithHttpInfo(chainId, entry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>ApiResponse of CommittedEntryResponse</returns>
        public ApiResponse< CommittedEntryResponse > CreateEntryUsingPOSTWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->CreateEntryUsingPOST");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryDataApi->CreateEntryUsingPOST");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntryUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedEntryResponse)));
            
        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of CommittedEntryResponse</returns>
        public async System.Threading.Tasks.Task<CommittedEntryResponse> CreateEntryUsingPOSTAsync (string chainId, Entry entry)
        {
             ApiResponse<CommittedEntryResponse> localVarResponse = await CreateEntryUsingPOSTAsyncWithHttpInfo(chainId, entry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Create a new entry for the specified chain</param>
        /// <returns>Task of ApiResponse (CommittedEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommittedEntryResponse>> CreateEntryUsingPOSTAsyncWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->CreateEntryUsingPOST");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryDataApi->CreateEntryUsingPOST");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntryUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommittedEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommittedEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommittedEntryResponse)));
            
        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>IdResponse</returns>
        public IdResponse DetermineEntryId (string chainId, Entry entry)
        {
             ApiResponse<IdResponse> localVarResponse = DetermineEntryIdWithHttpInfo(chainId, entry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>ApiResponse of IdResponse</returns>
        public ApiResponse< IdResponse > DetermineEntryIdWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->DetermineEntryId");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryDataApi->DetermineEntryId");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetermineEntryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>Task of IdResponse</returns>
        public async System.Threading.Tasks.Task<IdResponse> DetermineEntryIdAsync (string chainId, Entry entry)
        {
             ApiResponse<IdResponse> localVarResponse = await DetermineEntryIdAsyncWithHttpInfo(chainId, entry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pre determine the Id of an entry request without anchoring the entry 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">The entry to determine the hash for on the specified chain</param>
        /// <returns>Task of ApiResponse (IdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdResponse>> DetermineEntryIdAsyncWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->DetermineEntryId");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryDataApi->DetermineEntryId");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DetermineEntryId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse EntryById (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = EntryByIdWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > EntryByIdWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->EntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryDataApi->EntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByIdAsync (string chainId, string entryId)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await EntryByIdAsyncWithHttpInfo(chainId, entryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entryId">entryId</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByIdAsyncWithHttpInfo (string chainId, string entryId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->EntryById");
            // verify the required parameter 'entryId' is set
            if (entryId == null)
                throw new ApiException(400, "Missing required parameter 'entryId' when calling EntryDataApi->EntryById");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryId != null) localVarPathParams.Add("entryId", Configuration.ApiClient.ParameterToString(entryId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>AnchoredEntryResponse</returns>
        public AnchoredEntryResponse EntryByRequest (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = EntryByRequestWithHttpInfo(chainId, entry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>ApiResponse of AnchoredEntryResponse</returns>
        public ApiResponse< AnchoredEntryResponse > EntryByRequestWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->EntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryDataApi->EntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of AnchoredEntryResponse</returns>
        public async System.Threading.Tasks.Task<AnchoredEntryResponse> EntryByRequestAsync (string chainId, Entry entry)
        {
             ApiResponse<AnchoredEntryResponse> localVarResponse = await EntryByRequestAsyncWithHttpInfo(chainId, entry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an existing entry in the provided chain 
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">chainId</param>
        /// <param name="entry">Retrieve the entry</param>
        /// <returns>Task of ApiResponse (AnchoredEntryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnchoredEntryResponse>> EntryByRequestAsyncWithHttpInfo (string chainId, Entry entry)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntryDataApi->EntryByRequest");
            // verify the required parameter 'entry' is set
            if (entry == null)
                throw new ApiException(400, "Missing required parameter 'entry' when calling EntryDataApi->EntryByRequest");

            var localVarPath = "/blockchain/easy/0.1.0/chains/{chainId}/entries/entry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (chainId != null) localVarPathParams.Add("chainId", Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entry != null && entry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entry; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntryByRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnchoredEntryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnchoredEntryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnchoredEntryResponse)));
            
        }

    }
}
