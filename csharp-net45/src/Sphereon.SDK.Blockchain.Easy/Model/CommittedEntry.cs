/* 
 * Easy Blockchain API
 *
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Blockchain.Easy.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Blockchain.Easy.Model
{
    /// <summary>
    /// Committed Entry
    /// </summary>
    [DataContract]
    public partial class CommittedEntry :  IEquatable<CommittedEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommittedEntry" /> class.
        /// </summary>
        /// <param name="Entry">Entry.</param>
        public CommittedEntry(Entry Entry = default(Entry))
        {
            this.Entry = Entry;
        }
        
        /// <summary>
        /// Gets or Sets Entry
        /// </summary>
        [DataMember(Name="entry", EmitDefaultValue=false)]
        public Entry Entry { get; set; }

        /// <summary>
        /// Chain ID
        /// </summary>
        /// <value>Chain ID</value>
        [DataMember(Name="chainId", EmitDefaultValue=false)]
        public string ChainId { get; private set; }

        /// <summary>
        /// Raw data structures of backend
        /// </summary>
        /// <value>Raw data structures of backend</value>
        [DataMember(Name="rawBackendStructure", EmitDefaultValue=false)]
        public string RawBackendStructure { get; private set; }

        /// <summary>
        /// Entry ID
        /// </summary>
        /// <value>Entry ID</value>
        [DataMember(Name="entryId", EmitDefaultValue=false)]
        public string EntryId { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommittedEntry {\n");
            sb.Append("  Entry: ").Append(Entry).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  RawBackendStructure: ").Append(RawBackendStructure).Append("\n");
            sb.Append("  EntryId: ").Append(EntryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CommittedEntry);
        }

        /// <summary>
        /// Returns true if CommittedEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of CommittedEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommittedEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Entry == other.Entry ||
                    this.Entry != null &&
                    this.Entry.Equals(other.Entry)
                ) && 
                (
                    this.ChainId == other.ChainId ||
                    this.ChainId != null &&
                    this.ChainId.Equals(other.ChainId)
                ) && 
                (
                    this.RawBackendStructure == other.RawBackendStructure ||
                    this.RawBackendStructure != null &&
                    this.RawBackendStructure.Equals(other.RawBackendStructure)
                ) && 
                (
                    this.EntryId == other.EntryId ||
                    this.EntryId != null &&
                    this.EntryId.Equals(other.EntryId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Entry != null)
                    hash = hash * 59 + this.Entry.GetHashCode();
                if (this.ChainId != null)
                    hash = hash * 59 + this.ChainId.GetHashCode();
                if (this.RawBackendStructure != null)
                    hash = hash * 59 + this.RawBackendStructure.GetHashCode();
                if (this.EntryId != null)
                    hash = hash * 59 + this.EntryId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
