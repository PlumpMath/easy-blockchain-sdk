/* 
 * Easy Blockchain API
 *
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Threading;
using NUnit.Framework;
using NUnit.Framework.Constraints;
using Sphereon.SDK.Blockchain.Easy.Api;
using Sphereon.SDK.Blockchain.Easy.Client;
using Sphereon.SDK.Blockchain.Easy.Model;

namespace Sphereon.SDK.Blockchain.Easy.Test.Api
{
    /// <summary>
    ///  Class for testing AllApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AllApiTests : AbstractTests
    {
        private AllApi _allApi;
        private static string _determinedEntryId;
        private static DateTime _firstEntryAnchorTime;
        private static CommittedEntry _firstEntry;
        private static DateTime _nextEntryAnchorTime;
        private static CommittedEntry _nextEntry;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            _allApi = new AllApi();
            ConfigureApi(_allApi.Configuration);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        /// <summary>
        /// Test CreateChain
        /// </summary>
        [Test, Order(10), Sequential]
        public void CreateChainTest()
        {
            var chain = CreateChainRequest("Test Content", "first external id", "second external id");
            var response = _allApi.CreateChain(ContextMultchain, chain);
            Assert.IsInstanceOf<CommittedChainResponse>(response, "response is CommittedChainResponse");
            Assert.NotNull(response);
            Assert.NotNull(response);
            Assert.NotNull(response.Chain);
            Assert.NotNull(response.Chain.Id);
        }


        /// <summary>
        /// Test ChainIdExists
        /// </summary>
        [Test, Order(20), Sequential]
        public void ChainIdExistsTest()
        {
            var response = _allApi.ChainIdExists(ContextMultchain, TestChainId);
            Assert.IsInstanceOf<IdResponse>(response, "response is IdResponse");
        }


        /// <summary>
        /// Test EntryIdExists
        /// </summary>
        [Test, Order(30), Sequential]
        public void ExistingEntryByRequest()
        {
            var entry = CreateEntry(TestEntryContent, FirstEntryExternalId, SecondEntryExternalId);
            var response = _allApi.EntryByRequest(ContextFactom, TestChainId, entry);
            Assert.IsInstanceOf<AnchoredEntryResponse>(response, "response is AnchoredEntryResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.AnchoredEntry);
            Assert.True(response.AnchorTimes.Count >= 3);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.AnchorState);
        }

        /// <summary>
        /// Test EntryIdExists
        /// </summary>
        [Test, Order(40), Sequential]
        public void NonExistingEntryByRequest()
        {
            var entry = CreateEntry(TestEntryContent, "" + DateTime.Now.Ticks);
            TestDelegate testDelegate = () => _allApi.EntryByRequest(ContextMultchain, TestChainId, entry);
            Assert.Throws<ApiException>(testDelegate, "blah");
        }


        /// <summary>
        /// Test CreateEntry
        /// </summary>
        [Test, Order(50), Sequential]
        public void CreateEntryTest()
        {
            var entry = CreateEntry(TestEntryContent, "" + DateTime.Now.Ticks);
            var createResponse = _allApi.CreateEntry(ContextMultchain, TestChainId, entry);
            Assert.IsInstanceOf<CommittedEntryResponse>(createResponse, "response is CommittedEntryResponse");
            Assert.NotNull(createResponse);
            Assert.NotNull(createResponse.Entry);
            Assert.NotNull(createResponse.CreationRequestTime);

            Thread.Sleep(20000); // Should be enough for multichain

            var entryResponse = _allApi.EntryByRequest(ContextMultchain, TestChainId, entry);
            Assert.IsInstanceOf<AnchoredEntryResponse>(entryResponse, "response is AnchoredEntryResponse");
            Assert.NotNull(entryResponse);
            Assert.NotNull(entryResponse.AnchoredEntry);
            Assert.True(entryResponse.AnchorTimes.Count >=0);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, entryResponse.AnchorState);
        }

        /// <summary>
        /// Test DetermineChainId
        /// </summary>
        [Test, Order(60), Sequential]
        public void DetermineChainIdTest()
        {
            var chain = CreateChainRequest("Test Content", "first external id", "second external id");
            var response = _allApi.DetermineChainId(ContextFactom, chain, true);
            Assert.IsInstanceOf<IdResponse> (response, "response is IdResponse");
        }

        /// <summary>
        /// Test DetermineEntryId
        /// </summary>
        [Test, Order(70), Sequential]
        public void DetermineEntryIdTest()
        {
            var entry = CreateEntry(TestEntryContent, FirstEntryExternalId, SecondEntryExternalId);
            var response = _allApi.DetermineEntryId(ContextFactom, TestChainId, entry, true);
            Assert.IsInstanceOf<IdResponse> (response, "response is IdResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.Id);
            Assert.True(response.Exists.HasValue);
            Assert.True(response.Exists.Value == IdResponse.ExistsEnum.True);
            _determinedEntryId = response.Id;
        }

        /// <summary>
        /// Test EntryById
        /// </summary>
        [Test, Order(80), Sequential]
        public void EntryByIdTest()
        {
            var response = _allApi.EntryById(ContextFactom, TestChainId, _determinedEntryId);
            Assert.IsInstanceOf<AnchoredEntryResponse> (response, "response is AnchoredEntryResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.AnchoredEntry);
            Assert.True(response.AnchorTimes.Count >= 3);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.AnchorState);
        }


        /// <summary>
        /// Test FirstEntry
        /// </summary>
        [Test, Order(90), Sequential]
        public void FirstEntryTest()
        {
            var response = _allApi.FirstEntry(ContextFactom, TestChainId);
            Assert.IsInstanceOf<AnchoredEntryResponse> (response, "response is AnchoredEntryResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.AnchoredEntry);
            Assert.True(response.AnchorTimes.Count >= 0);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.AnchorState);
            //Assert.IsTrue(response.CurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is deployed
            Assert.IsTrue(response.AnchorTimes[0].HasValue);
            _firstEntryAnchorTime = response.AnchorTimes[0].Value;
            _firstEntry = response.AnchoredEntry;
        }


        /// <summary>
        /// Test NextEntryById
        /// </summary>
        [Test, Order(100), Sequential]
        public void NextEntryByIdTest()
        {
            var response = _allApi.NextEntryById(ContextFactom, TestChainId, _firstEntry.EntryId, _firstEntryAnchorTime);
            Assert.IsInstanceOf<AnchoredEntryResponse> (response, "response is AnchoredEntryResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.AnchoredEntry);
            Assert.True(response.AnchorTimes.Count >= 0);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.AnchorState);
            //Assert.IsTrue(response.CurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is deployed
            Assert.IsTrue(response.AnchorTimes[0].HasValue);
            _nextEntryAnchorTime = response.AnchorTimes[0].Value;
            _nextEntry = response.AnchoredEntry;
        }

        /// <summary>
        /// Test NextEntryByRequest
        /// </summary>
        [Test, Order(110), Sequential]
        public void NextEntryByRequestTest()
        {
            var response = _allApi.NextEntryByRequest(ContextFactom, TestChainId, _firstEntry.Entry, _firstEntryAnchorTime);
            Assert.IsInstanceOf<AnchoredEntryResponse> (response, "response is AnchoredEntryResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.AnchoredEntry);
            Assert.True(response.AnchorTimes.Count >= 0);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.AnchorState);
            //Assert.IsTrue(response.CurrentAnchorTime.HasValue); // TODO: uncomment when new easy-chains is deployed
        }

        /// <summary>
        /// Test PreviousEntryById
        /// </summary>
        [Test, Order(120), Sequential]
        public void PreviousEntryByIdTest()
        {
            var response = _allApi.PreviousEntryById(ContextFactom, TestChainId, _nextEntry.EntryId, _nextEntryAnchorTime);
            Assert.IsInstanceOf<AnchoredEntryResponse> (response, "response is AnchoredEntryResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.AnchoredEntry);
            Assert.True(response.AnchorTimes.Count >= 0);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.AnchorState);
            Assert.IsTrue(response.CurrentAnchorTime.HasValue);
            Assert.IsTrue(response.AnchoredEntry.ChainId == _firstEntry.ChainId);
            Assert.IsTrue(response.AnchoredEntry.EntryId == _firstEntry.EntryId);
        }

        /// <summary>
        /// Test PreviousEntryByRequest
        /// </summary>
        [Test, Order(130), Sequential]
        public void PreviousEntryByRequestTest()
        {
            var response = _allApi.PreviousEntryByRequest(ContextFactom, TestChainId, _nextEntry.Entry, _nextEntryAnchorTime);
            Assert.IsInstanceOf<AnchoredEntryResponse> (response, "response is AnchoredEntryResponse");
            Assert.NotNull(response);
            Assert.NotNull(response.AnchoredEntry);
            Assert.True(response.AnchorTimes.Count >= 0);
            Assert.AreEqual(AnchoredEntryResponse.AnchorStateEnum.ANCHORED, response.AnchorState);
            Assert.IsTrue(response.CurrentAnchorTime.HasValue);
            Assert.IsTrue(response.AnchoredEntry.ChainId == _firstEntry.ChainId);
            Assert.IsTrue(response.AnchoredEntry.EntryId == _firstEntry.EntryId);
        }


        /// <summary>
        /// Test CreateBackend
        /// </summary>
        [Test]
        public void CreateBackendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Backend backend = null;
            //var response = _allApi.CreateBackend(backend);
            //Assert.IsInstanceOf<Backend> (response, "response is Backend");
        }


        /// <summary>
        /// Test CreateContext
        /// </summary>
        [Test]
        public void CreateContextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Context context = null;
            //var response = _allApi.CreateContext(context);
            //Assert.IsInstanceOf<Context> (response, "response is Context");
        }


        /// <summary>
        /// Test DeleteBackend
        /// </summary>
        [Test]
        public void DeleteBackendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backendId = null;
            //_allApi.DeleteBackend(backendId);
        }


        /// <summary>
        /// Test FindBackends
        /// </summary>
        [Test]
        public void FindBackendsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backendId = null;
            //bool? includePublic = null;
            //var response = _allApi.FindBackends(backendId, includePublic);
            //Assert.IsInstanceOf<List<Backend>> (response, "response is List<Backend>");
        }

        
        /// <summary>
        /// Test GetBackend
        /// </summary>
        [Test]
        public void GetBackendTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string backendId = null;
            //bool? includePublic = null;
            //var response = _allApi.GetBackend(backendId, includePublic);
            //Assert.IsInstanceOf<Backend> (response, "response is Backend");
        }

        /// <summary>
        /// Test GetContext
        /// </summary>
        [Test]
        public void GetContextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string context = null;
            //var response = _allApi.GetContext(context);
            //Assert.IsInstanceOf<Context> (response, "response is Context");
        }

        /// <summary>
        /// Test LastEntry
        /// </summary>
        [Test]
        public void LastEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string context = null;
            //string chainId = null;
            //var response = _allApi.LastEntry(context, chainId);
            //Assert.IsInstanceOf<AnchoredEntryResponse> (response, "response is AnchoredEntryResponse");
        }

        /// <summary>
        /// Test ListBackends
        /// </summary>
        [Test]
        public void ListBackendsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = _allApi.ListBackends();
            //Assert.IsInstanceOf<List<Backend>> (response, "response is List<Backend>");
        }

    }
}