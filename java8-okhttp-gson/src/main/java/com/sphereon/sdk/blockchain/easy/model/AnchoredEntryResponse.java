/*
 * Easy Blockchain API
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.easy.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.blockchain.easy.model.CommittedEntry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Anchored Entry response
 */
@ApiModel(description = "Anchored Entry response")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-11-28T12:30:12.265+01:00")
public class AnchoredEntryResponse {
  @SerializedName("anchoredEntry")
  private CommittedEntry anchoredEntry = null;

  @SerializedName("anchorTimes")
  private List<OffsetDateTime> anchorTimes = null;

  @SerializedName("currentAnchorTime")
  private OffsetDateTime currentAnchorTime = null;

  /**
   * Gets or Sets anchorState
   */
  @JsonAdapter(AnchorStateEnum.Adapter.class)
  public enum AnchorStateEnum {
    REQUESTED("REQUESTED"),
    
    COMMITTED("COMMITTED"),
    
    NOT_FOUND("NOT_FOUND"),
    
    ANCHORED("ANCHORED");

    private String value;

    AnchorStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnchorStateEnum fromValue(String text) {
      for (AnchorStateEnum b : AnchorStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AnchorStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnchorStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnchorStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AnchorStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("anchorState")
  private AnchorStateEnum anchorState = null;

  @SerializedName("lastAnchorTime")
  private OffsetDateTime lastAnchorTime = null;

  @SerializedName("firstAnchorTime")
  private OffsetDateTime firstAnchorTime = null;

  public AnchoredEntryResponse anchoredEntry(CommittedEntry anchoredEntry) {
    this.anchoredEntry = anchoredEntry;
    return this;
  }

   /**
   * Get anchoredEntry
   * @return anchoredEntry
  **/
  @ApiModelProperty(required = true, value = "")
  public CommittedEntry getAnchoredEntry() {
    return anchoredEntry;
  }

  public void setAnchoredEntry(CommittedEntry anchoredEntry) {
    this.anchoredEntry = anchoredEntry;
  }

  public AnchoredEntryResponse anchorTimes(List<OffsetDateTime> anchorTimes) {
    this.anchorTimes = anchorTimes;
    return this;
  }

  public AnchoredEntryResponse addAnchorTimesItem(OffsetDateTime anchorTimesItem) {
    if (this.anchorTimes == null) {
      this.anchorTimes = new ArrayList<OffsetDateTime>();
    }
    this.anchorTimes.add(anchorTimesItem);
    return this;
  }

   /**
   * All the times at which the Entry with the same Id was anchored in the blockchain in ISO 8601 format. The first, current and last Anchor Times will also be in this list
   * @return anchorTimes
  **/
  @ApiModelProperty(value = "All the times at which the Entry with the same Id was anchored in the blockchain in ISO 8601 format. The first, current and last Anchor Times will also be in this list")
  public List<OffsetDateTime> getAnchorTimes() {
    return anchorTimes;
  }

  public void setAnchorTimes(List<OffsetDateTime> anchorTimes) {
    this.anchorTimes = anchorTimes;
  }

   /**
   * The current anchor time (this is not necessarely the last anchor time!) of the entry (if any) in the blockchain in ISO 8601 format
   * @return currentAnchorTime
  **/
  @ApiModelProperty(value = "The current anchor time (this is not necessarely the last anchor time!) of the entry (if any) in the blockchain in ISO 8601 format")
  public OffsetDateTime getCurrentAnchorTime() {
    return currentAnchorTime;
  }

   /**
   * Get anchorState
   * @return anchorState
  **/
  @ApiModelProperty(required = true, value = "")
  public AnchorStateEnum getAnchorState() {
    return anchorState;
  }

   /**
   * The last anchor time of the entry (if any) in the blockchain in ISO 8601 format
   * @return lastAnchorTime
  **/
  @ApiModelProperty(value = "The last anchor time of the entry (if any) in the blockchain in ISO 8601 format")
  public OffsetDateTime getLastAnchorTime() {
    return lastAnchorTime;
  }

   /**
   * The first anchor time of the entry (if any) in the blockchain in ISO 8601 format
   * @return firstAnchorTime
  **/
  @ApiModelProperty(value = "The first anchor time of the entry (if any) in the blockchain in ISO 8601 format")
  public OffsetDateTime getFirstAnchorTime() {
    return firstAnchorTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnchoredEntryResponse anchoredEntryResponse = (AnchoredEntryResponse) o;
    return Objects.equals(this.anchoredEntry, anchoredEntryResponse.anchoredEntry) &&
        Objects.equals(this.anchorTimes, anchoredEntryResponse.anchorTimes) &&
        Objects.equals(this.currentAnchorTime, anchoredEntryResponse.currentAnchorTime) &&
        Objects.equals(this.anchorState, anchoredEntryResponse.anchorState) &&
        Objects.equals(this.lastAnchorTime, anchoredEntryResponse.lastAnchorTime) &&
        Objects.equals(this.firstAnchorTime, anchoredEntryResponse.firstAnchorTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anchoredEntry, anchorTimes, currentAnchorTime, anchorState, lastAnchorTime, firstAnchorTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnchoredEntryResponse {\n");
    
    sb.append("    anchoredEntry: ").append(toIndentedString(anchoredEntry)).append("\n");
    sb.append("    anchorTimes: ").append(toIndentedString(anchorTimes)).append("\n");
    sb.append("    currentAnchorTime: ").append(toIndentedString(currentAnchorTime)).append("\n");
    sb.append("    anchorState: ").append(toIndentedString(anchorState)).append("\n");
    sb.append("    lastAnchorTime: ").append(toIndentedString(lastAnchorTime)).append("\n");
    sb.append("    firstAnchorTime: ").append(toIndentedString(firstAnchorTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

