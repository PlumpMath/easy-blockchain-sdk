/*
 * Easy Blockchain API
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.easy.api;

import com.sphereon.sdk.blockchain.easy.handler.ApiCallback;
import com.sphereon.sdk.blockchain.easy.handler.ApiClient;
import com.sphereon.sdk.blockchain.easy.handler.ApiException;
import com.sphereon.sdk.blockchain.easy.handler.ApiResponse;
import com.sphereon.sdk.blockchain.easy.handler.Configuration;
import com.sphereon.sdk.blockchain.easy.handler.Pair;
import com.sphereon.sdk.blockchain.easy.handler.ProgressRequestBody;
import com.sphereon.sdk.blockchain.easy.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sphereon.sdk.blockchain.easy.model.AnchoredEntryResponse;
import com.sphereon.sdk.blockchain.easy.model.Backend;
import com.sphereon.sdk.blockchain.easy.model.Chain;
import com.sphereon.sdk.blockchain.easy.model.CommittedChainResponse;
import com.sphereon.sdk.blockchain.easy.model.CommittedEntryResponse;
import com.sphereon.sdk.blockchain.easy.model.Context;
import com.sphereon.sdk.blockchain.easy.model.Entry;
import com.sphereon.sdk.blockchain.easy.model.ErrorResponse;
import com.sphereon.sdk.blockchain.easy.model.IdResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AllApi {
    private ApiClient apiClient;

    public AllApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AllApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for chainIdExists
     * @param context context (required)
     * @param chainId chainId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chainIdExistsCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id/{chainId}"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chainIdExistsValidateBeforeCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling chainIdExists(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainIdExists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = chainIdExistsCall(context, chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Determine whether the Id of a chain exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse chainIdExists(String context, String chainId) throws ApiException {
        ApiResponse<IdResponse> resp = chainIdExistsWithHttpInfo(context, chainId);
        return resp.getData();
    }

    /**
     * Determine whether the Id of a chain exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> chainIdExistsWithHttpInfo(String context, String chainId) throws ApiException {
        com.squareup.okhttp.Call call = chainIdExistsValidateBeforeCall(context, chainId, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Determine whether the Id of a chain exists in the blockchain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chainIdExistsAsync(String context, String chainId, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chainIdExistsValidateBeforeCall(context, chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBackend
     * @param backend backend (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBackendCall(Backend backend, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = backend;
        
        // create path and map variables
        String localVarPath = "/backends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBackendValidateBeforeCall(Backend backend, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backend' is set
        if (backend == null) {
            throw new ApiException("Missing the required parameter 'backend' when calling createBackend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createBackendCall(backend, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new backend
     * 
     * @param backend backend (required)
     * @return Backend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Backend createBackend(Backend backend) throws ApiException {
        ApiResponse<Backend> resp = createBackendWithHttpInfo(backend);
        return resp.getData();
    }

    /**
     * Create a new backend
     * 
     * @param backend backend (required)
     * @return ApiResponse&lt;Backend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Backend> createBackendWithHttpInfo(Backend backend) throws ApiException {
        com.squareup.okhttp.Call call = createBackendValidateBeforeCall(backend, null, null);
        Type localVarReturnType = new TypeToken<Backend>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new backend (asynchronously)
     * 
     * @param backend backend (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBackendAsync(Backend backend, final ApiCallback<Backend> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBackendValidateBeforeCall(backend, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Backend>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createChain
     * @param context context (required)
     * @param chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChainCall(String context, Chain chain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chain;
        
        // create path and map variables
        String localVarPath = "/{context}/chains"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createChainValidateBeforeCall(String context, Chain chain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createChain(Async)");
        }
        
        // verify the required parameter 'chain' is set
        if (chain == null) {
            throw new ApiException("Missing the required parameter 'chain' when calling createChain(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createChainCall(context, chain, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new chain
     * 
     * @param context context (required)
     * @param chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @return CommittedChainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommittedChainResponse createChain(String context, Chain chain) throws ApiException {
        ApiResponse<CommittedChainResponse> resp = createChainWithHttpInfo(context, chain);
        return resp.getData();
    }

    /**
     * Create a new chain
     * 
     * @param context context (required)
     * @param chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @return ApiResponse&lt;CommittedChainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommittedChainResponse> createChainWithHttpInfo(String context, Chain chain) throws ApiException {
        com.squareup.okhttp.Call call = createChainValidateBeforeCall(context, chain, null, null);
        Type localVarReturnType = new TypeToken<CommittedChainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new chain (asynchronously)
     * 
     * @param context context (required)
     * @param chain Create a chain using the first entry supplied. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChainAsync(String context, Chain chain, final ApiCallback<CommittedChainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChainValidateBeforeCall(context, chain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommittedChainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createContext
     * @param context context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContextCall(Context context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = context;
        
        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContextValidateBeforeCall(Context context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createContext(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createContextCall(context, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new context
     * 
     * @param context context (required)
     * @return Context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Context createContext(Context context) throws ApiException {
        ApiResponse<Context> resp = createContextWithHttpInfo(context);
        return resp.getData();
    }

    /**
     * Create a new context
     * 
     * @param context context (required)
     * @return ApiResponse&lt;Context&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Context> createContextWithHttpInfo(Context context) throws ApiException {
        com.squareup.okhttp.Call call = createContextValidateBeforeCall(context, null, null);
        Type localVarReturnType = new TypeToken<Context>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new context (asynchronously)
     * 
     * @param context context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContextAsync(Context context, final ApiCallback<Context> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContextValidateBeforeCall(context, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Context>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEntry
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Create a new entry for the specified chain (required)
     * @param currentAnchorTime  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEntryCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEntryValidateBeforeCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling createEntry(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling createEntry(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createEntry(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createEntryCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Create a new entry for the specified chain (required)
     * @param currentAnchorTime  (optional)
     * @return CommittedEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommittedEntryResponse createEntry(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<CommittedEntryResponse> resp = createEntryWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Create a new entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Create a new entry for the specified chain (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;CommittedEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommittedEntryResponse> createEntryWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = createEntryValidateBeforeCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<CommittedEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new entry in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Create a new entry for the specified chain (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEntryAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<CommittedEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEntryValidateBeforeCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommittedEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBackend
     * @param backendId backendId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBackendCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/backends/{backendId}"
            .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBackendValidateBeforeCall(String backendId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling deleteBackend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteBackendCall(backendId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete backend by id (not by ledgername)
     * 
     * @param backendId backendId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBackend(String backendId) throws ApiException {
        deleteBackendWithHttpInfo(backendId);
    }

    /**
     * Delete backend by id (not by ledgername)
     * 
     * @param backendId backendId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBackendWithHttpInfo(String backendId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBackendValidateBeforeCall(backendId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete backend by id (not by ledgername) (asynchronously)
     * 
     * @param backendId backendId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBackendAsync(String backendId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBackendValidateBeforeCall(backendId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for determineChainId
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globally unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call determineChainIdCall(String context, Chain chain, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chain;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (checkExistence != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkExistence", checkExistence));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call determineChainIdValidateBeforeCall(String context, Chain chain, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling determineChainId(Async)");
        }
        
        // verify the required parameter 'chain' is set
        if (chain == null) {
            throw new ApiException("Missing the required parameter 'chain' when calling determineChainId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = determineChainIdCall(context, chain, checkExistence, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pre determine the Id of a chain request without anchoring it in the blockchain
     * 
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globally unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse determineChainId(String context, Chain chain, Boolean checkExistence) throws ApiException {
        ApiResponse<IdResponse> resp = determineChainIdWithHttpInfo(context, chain, checkExistence);
        return resp.getData();
    }

    /**
     * Pre determine the Id of a chain request without anchoring it in the blockchain
     * 
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globally unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> determineChainIdWithHttpInfo(String context, Chain chain, Boolean checkExistence) throws ApiException {
        com.squareup.okhttp.Call call = determineChainIdValidateBeforeCall(context, chain, checkExistence, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pre determine the Id of a chain request without anchoring it in the blockchain (asynchronously)
     * 
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globally unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call determineChainIdAsync(String context, Chain chain, Boolean checkExistence, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = determineChainIdValidateBeforeCall(context, chain, checkExistence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for determineEntryId
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call determineEntryIdCall(String context, String chainId, Entry entry, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id/{chainId}/entries"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (checkExistence != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkExistence", checkExistence));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call determineEntryIdValidateBeforeCall(String context, String chainId, Entry entry, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling determineEntryId(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling determineEntryId(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling determineEntryId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = determineEntryIdCall(context, chainId, entry, checkExistence, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pre determine the Id of an entry request without anchoring the entry
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse determineEntryId(String context, String chainId, Entry entry, Boolean checkExistence) throws ApiException {
        ApiResponse<IdResponse> resp = determineEntryIdWithHttpInfo(context, chainId, entry, checkExistence);
        return resp.getData();
    }

    /**
     * Pre determine the Id of an entry request without anchoring the entry
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> determineEntryIdWithHttpInfo(String context, String chainId, Entry entry, Boolean checkExistence) throws ApiException {
        com.squareup.okhttp.Call call = determineEntryIdValidateBeforeCall(context, chainId, entry, checkExistence, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pre determine the Id of an entry request without anchoring the entry (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call determineEntryIdAsync(String context, String chainId, Entry entry, Boolean checkExistence, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = determineEntryIdValidateBeforeCall(context, chainId, entry, checkExistence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entryById
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryByIdCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/{entryId}"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryByIdValidateBeforeCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling entryById(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling entryById(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling entryById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryByIdCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse entryById(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = entryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> entryByIdWithHttpInfo(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = entryByIdValidateBeforeCall(context, chainId, entryId, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing entry in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryByIdAsync(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryByIdValidateBeforeCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entryByRequest
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryByRequestCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/entry"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryByRequestValidateBeforeCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling entryByRequest(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling entryByRequest(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling entryByRequest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryByRequestCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse entryByRequest(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = entryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get an existing entry in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> entryByRequestWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = entryByRequestValidateBeforeCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing entry in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryByRequestAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryByRequestValidateBeforeCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entryIdExists
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryIdExistsCall(String context, String chainId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id/{chainId}/entries/{entryId}"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryIdExistsValidateBeforeCall(String context, String chainId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling entryIdExists(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling entryIdExists(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling entryIdExists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryIdExistsCall(context, chainId, entryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Determine whether the Id of an entry exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse entryIdExists(String context, String chainId, String entryId) throws ApiException {
        ApiResponse<IdResponse> resp = entryIdExistsWithHttpInfo(context, chainId, entryId);
        return resp.getData();
    }

    /**
     * Determine whether the Id of an entry exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> entryIdExistsWithHttpInfo(String context, String chainId, String entryId) throws ApiException {
        com.squareup.okhttp.Call call = entryIdExistsValidateBeforeCall(context, chainId, entryId, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Determine whether the Id of an entry exists in the blockchain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryIdExistsAsync(String context, String chainId, String entryId, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryIdExistsValidateBeforeCall(context, chainId, entryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findBackends
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findBackendsCall(String backendId, Boolean includePublic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/backends/{backendId}/find"
            .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (includePublic != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includePublic", includePublic));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findBackendsValidateBeforeCall(String backendId, Boolean includePublic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling findBackends(Async)");
        }
        
        
        com.squareup.okhttp.Call call = findBackendsCall(backendId, includePublic, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
     * 
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @return List&lt;Backend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Backend> findBackends(String backendId, Boolean includePublic) throws ApiException {
        ApiResponse<List<Backend>> resp = findBackendsWithHttpInfo(backendId, includePublic);
        return resp.getData();
    }

    /**
     * Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
     * 
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @return ApiResponse&lt;List&lt;Backend&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Backend>> findBackendsWithHttpInfo(String backendId, Boolean includePublic) throws ApiException {
        com.squareup.okhttp.Call call = findBackendsValidateBeforeCall(backendId, includePublic, null, null);
        Type localVarReturnType = new TypeToken<List<Backend>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others (asynchronously)
     * 
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findBackendsAsync(String backendId, Boolean includePublic, final ApiCallback<List<Backend>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findBackendsValidateBeforeCall(backendId, includePublic, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Backend>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for firstEntry
     * @param context context (required)
     * @param chainId chainId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call firstEntryCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/first"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call firstEntryValidateBeforeCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling firstEntry(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling firstEntry(Async)");
        }
        
        
        com.squareup.okhttp.Call call = firstEntryCall(context, chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse firstEntry(String context, String chainId) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = firstEntryWithHttpInfo(context, chainId);
        return resp.getData();
    }

    /**
     * Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> firstEntryWithHttpInfo(String context, String chainId) throws ApiException {
        com.squareup.okhttp.Call call = firstEntryValidateBeforeCall(context, chainId, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the first entry in the provided chain. This is the oldest entry also called the chain tail.  Please note that the achorTimes will only contain the first anchor time. Call getEntry to retrieve all times (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call firstEntryAsync(String context, String chainId, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = firstEntryValidateBeforeCall(context, chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBackend
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBackendCall(String backendId, Boolean includePublic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/backends/{backendId}"
            .replaceAll("\\{" + "backendId" + "\\}", apiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (includePublic != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includePublic", includePublic));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBackendValidateBeforeCall(String backendId, Boolean includePublic, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling getBackend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBackendCall(backendId, includePublic, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get existing backend by id (not by ledgername). Optionally including public backend of others
     * 
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @return Backend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Backend getBackend(String backendId, Boolean includePublic) throws ApiException {
        ApiResponse<Backend> resp = getBackendWithHttpInfo(backendId, includePublic);
        return resp.getData();
    }

    /**
     * Get existing backend by id (not by ledgername). Optionally including public backend of others
     * 
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @return ApiResponse&lt;Backend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Backend> getBackendWithHttpInfo(String backendId, Boolean includePublic) throws ApiException {
        com.squareup.okhttp.Call call = getBackendValidateBeforeCall(backendId, includePublic, null, null);
        Type localVarReturnType = new TypeToken<Backend>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get existing backend by id (not by ledgername). Optionally including public backend of others (asynchronously)
     * 
     * @param backendId backendId (required)
     * @param includePublic includePublic (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackendAsync(String backendId, Boolean includePublic, final ApiCallback<Backend> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackendValidateBeforeCall(backendId, includePublic, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Backend>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContext
     * @param context context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContextCall(String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContextValidateBeforeCall(String context, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling getContext(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getContextCall(context, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an existing context
     * 
     * @param context context (required)
     * @return Context
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Context getContext(String context) throws ApiException {
        ApiResponse<Context> resp = getContextWithHttpInfo(context);
        return resp.getData();
    }

    /**
     * Get an existing context
     * 
     * @param context context (required)
     * @return ApiResponse&lt;Context&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Context> getContextWithHttpInfo(String context) throws ApiException {
        com.squareup.okhttp.Call call = getContextValidateBeforeCall(context, null, null);
        Type localVarReturnType = new TypeToken<Context>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an existing context (asynchronously)
     * 
     * @param context context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContextAsync(String context, final ApiCallback<Context> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getContextValidateBeforeCall(context, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Context>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lastEntry
     * @param context context (required)
     * @param chainId chainId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lastEntryCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/last"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lastEntryValidateBeforeCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling lastEntry(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling lastEntry(Async)");
        }
        
        
        com.squareup.okhttp.Call call = lastEntryCall(context, chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse lastEntry(String context, String chainId) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = lastEntryWithHttpInfo(context, chainId);
        return resp.getData();
    }

    /**
     * Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> lastEntryWithHttpInfo(String context, String chainId) throws ApiException {
        com.squareup.okhttp.Call call = lastEntryValidateBeforeCall(context, chainId, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the last entry in the provided chain. This is the most recent entry also called the chain head. Please note that the achorTimes will only contain the latest anchor time. Call getEntry to retrieve all times (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lastEntryAsync(String context, String chainId, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lastEntryValidateBeforeCall(context, chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBackends
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBackendsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/backends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBackendsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listBackendsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List existing backends.
     * 
     * @return List&lt;Backend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Backend> listBackends() throws ApiException {
        ApiResponse<List<Backend>> resp = listBackendsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List existing backends.
     * 
     * @return ApiResponse&lt;List&lt;Backend&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Backend>> listBackendsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listBackendsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Backend>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List existing backends. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBackendsAsync(final ApiCallback<List<Backend>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBackendsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Backend>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nextEntryById
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nextEntryByIdCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/{entryId}/next"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nextEntryByIdValidateBeforeCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling nextEntryById(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling nextEntryById(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling nextEntryById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = nextEntryByIdCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse nextEntryById(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = nextEntryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> nextEntryByIdWithHttpInfo(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = nextEntryByIdValidateBeforeCall(context, chainId, entryId, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nextEntryByIdAsync(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nextEntryByIdValidateBeforeCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nextEntryByRequest
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nextEntryByRequestCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/entry/next"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nextEntryByRequestValidateBeforeCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling nextEntryByRequest(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling nextEntryByRequest(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling nextEntryByRequest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = nextEntryByRequestCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse nextEntryByRequest(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = nextEntryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> nextEntryByRequestWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = nextEntryByRequestValidateBeforeCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nextEntryByRequestAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nextEntryByRequestValidateBeforeCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for previousEntryById
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call previousEntryByIdCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/{entryId}/previous"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call previousEntryByIdValidateBeforeCall(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling previousEntryById(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling previousEntryById(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling previousEntryById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = previousEntryByIdCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse previousEntryById(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = previousEntryByIdWithHttpInfo(context, chainId, entryId, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> previousEntryByIdWithHttpInfo(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = previousEntryByIdValidateBeforeCall(context, chainId, entryId, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call previousEntryByIdAsync(String context, String chainId, String entryId, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = previousEntryByIdValidateBeforeCall(context, chainId, entryId, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for previousEntryByRequest
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call previousEntryByRequestCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/{chainId}/entries/entry/previous"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (currentAnchorTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentAnchorTime", currentAnchorTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call previousEntryByRequestValidateBeforeCall(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling previousEntryByRequest(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling previousEntryByRequest(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling previousEntryByRequest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = previousEntryByRequestCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return AnchoredEntryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnchoredEntryResponse previousEntryByRequest(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        ApiResponse<AnchoredEntryResponse> resp = previousEntryByRequestWithHttpInfo(context, chainId, entry, currentAnchorTime);
        return resp.getData();
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @return ApiResponse&lt;AnchoredEntryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnchoredEntryResponse> previousEntryByRequestWithHttpInfo(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime) throws ApiException {
        com.squareup.okhttp.Call call = previousEntryByRequestValidateBeforeCall(context, chainId, entry, currentAnchorTime, null, null);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry Retrieve the entry (required)
     * @param currentAnchorTime  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call previousEntryByRequestAsync(String context, String chainId, Entry entry, OffsetDateTime currentAnchorTime, final ApiCallback<AnchoredEntryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = previousEntryByRequestValidateBeforeCall(context, chainId, entry, currentAnchorTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnchoredEntryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
