/*
 * Easy Blockchain API
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.blockchain.easy.api;

import com.sphereon.sdk.blockchain.easy.handler.ApiCallback;
import com.sphereon.sdk.blockchain.easy.handler.ApiClient;
import com.sphereon.sdk.blockchain.easy.handler.ApiException;
import com.sphereon.sdk.blockchain.easy.handler.ApiResponse;
import com.sphereon.sdk.blockchain.easy.handler.Configuration;
import com.sphereon.sdk.blockchain.easy.handler.Pair;
import com.sphereon.sdk.blockchain.easy.handler.ProgressRequestBody;
import com.sphereon.sdk.blockchain.easy.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sphereon.sdk.blockchain.easy.model.Chain;
import com.sphereon.sdk.blockchain.easy.model.Entry;
import com.sphereon.sdk.blockchain.easy.model.ErrorResponse;
import com.sphereon.sdk.blockchain.easy.model.IdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdApi {
    private ApiClient apiClient;

    public IdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for chainIdExists
     * @param context context (required)
     * @param chainId chainId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chainIdExistsCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id/{chainId}"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chainIdExistsValidateBeforeCall(String context, String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling chainIdExists(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainIdExists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = chainIdExistsCall(context, chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Determine whether the Id of a chain exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse chainIdExists(String context, String chainId) throws ApiException {
        ApiResponse<IdResponse> resp = chainIdExistsWithHttpInfo(context, chainId);
        return resp.getData();
    }

    /**
     * Determine whether the Id of a chain exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> chainIdExistsWithHttpInfo(String context, String chainId) throws ApiException {
        com.squareup.okhttp.Call call = chainIdExistsValidateBeforeCall(context, chainId, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Determine whether the Id of a chain exists in the blockchain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chainIdExistsAsync(String context, String chainId, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chainIdExistsValidateBeforeCall(context, chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for determineChainId
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call determineChainIdCall(String context, Chain chain, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = chain;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (checkExistence != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkExistence", checkExistence));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call determineChainIdValidateBeforeCall(String context, Chain chain, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling determineChainId(Async)");
        }
        
        // verify the required parameter 'chain' is set
        if (chain == null) {
            throw new ApiException("Missing the required parameter 'chain' when calling determineChainId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = determineChainIdCall(context, chain, checkExistence, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pre determine the Id of a chain request without anchoring it in the blockchain
     * 
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse determineChainId(String context, Chain chain, Boolean checkExistence) throws ApiException {
        ApiResponse<IdResponse> resp = determineChainIdWithHttpInfo(context, chain, checkExistence);
        return resp.getData();
    }

    /**
     * Pre determine the Id of a chain request without anchoring it in the blockchain
     * 
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> determineChainIdWithHttpInfo(String context, Chain chain, Boolean checkExistence) throws ApiException {
        com.squareup.okhttp.Call call = determineChainIdValidateBeforeCall(context, chain, checkExistence, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pre determine the Id of a chain request without anchoring it in the blockchain (asynchronously)
     * 
     * @param context context (required)
     * @param chain Determine a chain hash. The entry needs at least a (combination of) globaly unique external Id in the complete Blockchain network! (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call determineChainIdAsync(String context, Chain chain, Boolean checkExistence, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = determineChainIdValidateBeforeCall(context, chain, checkExistence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for determineEntryId
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call determineEntryIdCall(String context, String chainId, Entry entry, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entry;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id/{chainId}/entries"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (checkExistence != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "checkExistence", checkExistence));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call determineEntryIdValidateBeforeCall(String context, String chainId, Entry entry, Boolean checkExistence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling determineEntryId(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling determineEntryId(Async)");
        }
        
        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling determineEntryId(Async)");
        }
        
        
        com.squareup.okhttp.Call call = determineEntryIdCall(context, chainId, entry, checkExistence, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Pre determine the Id of an entry request without anchoring the entry
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse determineEntryId(String context, String chainId, Entry entry, Boolean checkExistence) throws ApiException {
        ApiResponse<IdResponse> resp = determineEntryIdWithHttpInfo(context, chainId, entry, checkExistence);
        return resp.getData();
    }

    /**
     * Pre determine the Id of an entry request without anchoring the entry
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> determineEntryIdWithHttpInfo(String context, String chainId, Entry entry, Boolean checkExistence) throws ApiException {
        com.squareup.okhttp.Call call = determineEntryIdValidateBeforeCall(context, chainId, entry, checkExistence, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Pre determine the Id of an entry request without anchoring the entry (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entry The entry to determine the hash for on the specified chain (required)
     * @param checkExistence Check whether the id exists (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call determineEntryIdAsync(String context, String chainId, Entry entry, Boolean checkExistence, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = determineEntryIdValidateBeforeCall(context, chainId, entry, checkExistence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entryIdExists
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entryIdExistsCall(String context, String chainId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/{context}/chains/id/{chainId}/entries/{entryId}"
            .replaceAll("\\{" + "context" + "\\}", apiClient.escapeString(context.toString()))
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "entryId" + "\\}", apiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2schema" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entryIdExistsValidateBeforeCall(String context, String chainId, String entryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'context' is set
        if (context == null) {
            throw new ApiException("Missing the required parameter 'context' when calling entryIdExists(Async)");
        }
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling entryIdExists(Async)");
        }
        
        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling entryIdExists(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entryIdExistsCall(context, chainId, entryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Determine whether the Id of an entry exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @return IdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResponse entryIdExists(String context, String chainId, String entryId) throws ApiException {
        ApiResponse<IdResponse> resp = entryIdExistsWithHttpInfo(context, chainId, entryId);
        return resp.getData();
    }

    /**
     * Determine whether the Id of an entry exists in the blockchain
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @return ApiResponse&lt;IdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResponse> entryIdExistsWithHttpInfo(String context, String chainId, String entryId) throws ApiException {
        com.squareup.okhttp.Call call = entryIdExistsValidateBeforeCall(context, chainId, entryId, null, null);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Determine whether the Id of an entry exists in the blockchain (asynchronously)
     * 
     * @param context context (required)
     * @param chainId chainId (required)
     * @param entryId entryId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entryIdExistsAsync(String context, String chainId, String entryId, final ApiCallback<IdResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entryIdExistsValidateBeforeCall(context, chainId, entryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
