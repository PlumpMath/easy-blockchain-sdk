/**
 * Easy Blockchain API
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is an expensive operation.  2. Store entries on the chain from step 1. The entries will contain the content and metadata you want to store forever on the specified chain.  3. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.1.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['SphereonSDKBlockchainEasy/ApiClient', 'SphereonSDKBlockchainEasy/model/CommittedEntryResponse', 'SphereonSDKBlockchainEasy/model/Entry', 'SphereonSDKBlockchainEasy/model/VndErrors', 'SphereonSDKBlockchainEasy/model/AnchoredEntryResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommittedEntryResponse'), require('../model/Entry'), require('../model/VndErrors'), require('../model/AnchoredEntryResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.EasyBlockchainApi) {
      root.EasyBlockchainApi = {};
    }
    root.EasyBlockchainApi.EntryApi = factory(root.EasyBlockchainApi.ApiClient, root.EasyBlockchainApi.CommittedEntryResponse, root.EasyBlockchainApi.Entry, root.EasyBlockchainApi.VndErrors, root.EasyBlockchainApi.AnchoredEntryResponse);
  }
}(this, function(ApiClient, CommittedEntryResponse, Entry, VndErrors, AnchoredEntryResponse) {
  'use strict';

  /**
   * Entry service.
   * @module SphereonSDKBlockchainEasy/api/EntryApi
   * @version 0.1.0
   */

  /**
   * Constructs a new EntryApi. 
   * @alias module:SphereonSDKBlockchainEasy/api/EntryApi
   * @class
   * @param {module:SphereonSDKBlockchainEasy/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:SphereonSDKBlockchainEasy/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createEntry operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~createEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/CommittedEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new entry in the provided chain
     * @param {String} chainId chainId
     * @param {module:SphereonSDKBlockchainEasy/model/Entry} entry Create a new entry for the specified chain
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~createEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/CommittedEntryResponse}
     */
    this.createEntry = function(chainId, entry, callback) {
      var postBody = entry;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling createEntry";
      }

      // verify the required parameter 'entry' is set
      if (entry == undefined || entry == null) {
        throw "Missing the required parameter 'entry' when calling createEntry";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = CommittedEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entryById operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~entryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing entry in the provided chain
     * @param {String} chainId chainId
     * @param {String} entryId entryId
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~entryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    this.entryById = function(chainId, entryId, callback) {
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling entryById";
      }

      // verify the required parameter 'entryId' is set
      if (entryId == undefined || entryId == null) {
        throw "Missing the required parameter 'entryId' when calling entryById";
      }


      var pathParams = {
        'chainId': chainId,
        'entryId': entryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AnchoredEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the entryByRequest operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~entryByRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing entry in the provided chain
     * @param {String} chainId chainId
     * @param {module:SphereonSDKBlockchainEasy/model/Entry} entry Retrieve the entry
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~entryByRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    this.entryByRequest = function(chainId, entry, callback) {
      var postBody = entry;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling entryByRequest";
      }

      // verify the required parameter 'entry' is set
      if (entry == undefined || entry == null) {
        throw "Missing the required parameter 'entry' when calling entryByRequest";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AnchoredEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries/entry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lastEntry operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~lastEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the last entry in the provided chain. This is the most recent entry also called the chain head
     * @param {String} chainId chainId
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~lastEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    this.lastEntry = function(chainId, callback) {
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling lastEntry";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AnchoredEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries/last', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nextEntryById operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~nextEntryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * @param {String} chainId chainId
     * @param {String} entryId entryId
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~nextEntryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    this.nextEntryById = function(chainId, entryId, callback) {
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling nextEntryById";
      }

      // verify the required parameter 'entryId' is set
      if (entryId == undefined || entryId == null) {
        throw "Missing the required parameter 'entryId' when calling nextEntryById";
      }


      var pathParams = {
        'chainId': chainId,
        'entryId': entryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AnchoredEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}/next', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the nextEntryByRequest operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~nextEntryByRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the entry after the supplied entry Id (the next) in the provided chain
     * @param {String} chainId chainId
     * @param {module:SphereonSDKBlockchainEasy/model/Entry} entry Retrieve the entry
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~nextEntryByRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    this.nextEntryByRequest = function(chainId, entry, callback) {
      var postBody = entry;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling nextEntryByRequest";
      }

      // verify the required parameter 'entry' is set
      if (entry == undefined || entry == null) {
        throw "Missing the required parameter 'entry' when calling nextEntryByRequest";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AnchoredEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries/entry/next', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the previousEntryById operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~previousEntryByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * @param {String} chainId chainId
     * @param {String} entryId entryId
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~previousEntryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    this.previousEntryById = function(chainId, entryId, callback) {
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling previousEntryById";
      }

      // verify the required parameter 'entryId' is set
      if (entryId == undefined || entryId == null) {
        throw "Missing the required parameter 'entryId' when calling previousEntryById";
      }


      var pathParams = {
        'chainId': chainId,
        'entryId': entryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AnchoredEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries/{entryId}/previous', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the previousEntryByRequest operation.
     * @callback module:SphereonSDKBlockchainEasy/api/EntryApi~previousEntryByRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the entry before the supplied entry Id (the previous) in the provided chain
     * @param {String} chainId chainId
     * @param {module:SphereonSDKBlockchainEasy/model/Entry} entry Retrieve the entry
     * @param {module:SphereonSDKBlockchainEasy/api/EntryApi~previousEntryByRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:SphereonSDKBlockchainEasy/model/AnchoredEntryResponse}
     */
    this.previousEntryByRequest = function(chainId, entry, callback) {
      var postBody = entry;

      // verify the required parameter 'chainId' is set
      if (chainId == undefined || chainId == null) {
        throw "Missing the required parameter 'chainId' when calling previousEntryByRequest";
      }

      // verify the required parameter 'entry' is set
      if (entry == undefined || entry == null) {
        throw "Missing the required parameter 'entry' when calling previousEntryByRequest";
      }


      var pathParams = {
        'chainId': chainId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = AnchoredEntryResponse;

      return this.apiClient.callApi(
        '/blockchain/easy/0.1.0/chains/{chainId}/entries/entry/previous', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
