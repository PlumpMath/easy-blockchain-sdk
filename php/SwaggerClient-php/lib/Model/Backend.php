<?php
/**
 * Backend
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Easy
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Easy\Model;

use \ArrayAccess;

/**
 * Backend Class Doc Comment
 *
 * @category    Class
 * @description Backend
 * @package     Sphereon\SDK\Blockchain\Easy
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Backend implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Backend';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rpc_providers' => '\Sphereon\SDK\Blockchain\Easy\Model\RpcProvider[]',
        'api_version' => 'int',
        'ledger_name' => 'string',
        'implementation' => 'string',
        'start' => '\DateTime',
        'end' => '\DateTime',
        'data_structure' => 'string',
        'id' => 'string',
        'external_access' => '\Sphereon\SDK\Blockchain\Easy\Model\Access'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rpc_providers' => null,
        'api_version' => 'int32',
        'ledger_name' => null,
        'implementation' => null,
        'start' => 'date-time',
        'end' => 'date-time',
        'data_structure' => null,
        'id' => null,
        'external_access' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'rpc_providers' => 'rpcProviders',
        'api_version' => 'apiVersion',
        'ledger_name' => 'ledgerName',
        'implementation' => 'implementation',
        'start' => 'start',
        'end' => 'end',
        'data_structure' => 'dataStructure',
        'id' => 'id',
        'external_access' => 'externalAccess'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'rpc_providers' => 'setRpcProviders',
        'api_version' => 'setApiVersion',
        'ledger_name' => 'setLedgerName',
        'implementation' => 'setImplementation',
        'start' => 'setStart',
        'end' => 'setEnd',
        'data_structure' => 'setDataStructure',
        'id' => 'setId',
        'external_access' => 'setExternalAccess'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'rpc_providers' => 'getRpcProviders',
        'api_version' => 'getApiVersion',
        'ledger_name' => 'getLedgerName',
        'implementation' => 'getImplementation',
        'start' => 'getStart',
        'end' => 'getEnd',
        'data_structure' => 'getDataStructure',
        'id' => 'getId',
        'external_access' => 'getExternalAccess'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const IMPLEMENTATION_BITCOIN = 'Bitcoin';
    const IMPLEMENTATION_NONE = 'None';
    const IMPLEMENTATION_ETHEREUM = 'Ethereum';
    const DATA_STRUCTURE_FACTOM = 'Factom';
    const DATA_STRUCTURE_MULTICHAIN = 'Multichain';
    const DATA_STRUCTURE_ETHEREUM = 'Ethereum';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getImplementationAllowableValues()
    {
        return [
            self::IMPLEMENTATION_BITCOIN,
            self::IMPLEMENTATION_NONE,
            self::IMPLEMENTATION_ETHEREUM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDataStructureAllowableValues()
    {
        return [
            self::DATA_STRUCTURE_FACTOM,
            self::DATA_STRUCTURE_MULTICHAIN,
            self::DATA_STRUCTURE_ETHEREUM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rpc_providers'] = isset($data['rpc_providers']) ? $data['rpc_providers'] : null;
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['ledger_name'] = isset($data['ledger_name']) ? $data['ledger_name'] : null;
        $this->container['implementation'] = isset($data['implementation']) ? $data['implementation'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['data_structure'] = isset($data['data_structure']) ? $data['data_structure'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_access'] = isset($data['external_access']) ? $data['external_access'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getImplementationAllowableValues();
        if (!in_array($this->container['implementation'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'implementation', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getDataStructureAllowableValues();
        if (!in_array($this->container['data_structure'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'data_structure', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getImplementationAllowableValues();
        if (!in_array($this->container['implementation'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getDataStructureAllowableValues();
        if (!in_array($this->container['data_structure'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets rpc_providers
     * @return \Sphereon\SDK\Blockchain\Easy\Model\RpcProvider[]
     */
    public function getRpcProviders()
    {
        return $this->container['rpc_providers'];
    }

    /**
     * Sets rpc_providers
     * @param \Sphereon\SDK\Blockchain\Easy\Model\RpcProvider[] $rpc_providers
     * @return $this
     */
    public function setRpcProviders($rpc_providers)
    {
        $this->container['rpc_providers'] = $rpc_providers;

        return $this;
    }

    /**
     * Gets api_version
     * @return int
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     * @param int $api_version
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets ledger_name
     * @return string
     */
    public function getLedgerName()
    {
        return $this->container['ledger_name'];
    }

    /**
     * Sets ledger_name
     * @param string $ledger_name
     * @return $this
     */
    public function setLedgerName($ledger_name)
    {
        $this->container['ledger_name'] = $ledger_name;

        return $this;
    }

    /**
     * Gets implementation
     * @return string
     */
    public function getImplementation()
    {
        return $this->container['implementation'];
    }

    /**
     * Sets implementation
     * @param string $implementation
     * @return $this
     */
    public function setImplementation($implementation)
    {
        $allowed_values = $this->getImplementationAllowableValues();
        if (!is_null($implementation) && !in_array($implementation, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'implementation', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['implementation'] = $implementation;

        return $this;
    }

    /**
     * Gets start
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     * @param \DateTime $start
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     * @param \DateTime $end
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets data_structure
     * @return string
     */
    public function getDataStructure()
    {
        return $this->container['data_structure'];
    }

    /**
     * Sets data_structure
     * @param string $data_structure
     * @return $this
     */
    public function setDataStructure($data_structure)
    {
        $allowed_values = $this->getDataStructureAllowableValues();
        if (!is_null($data_structure) && !in_array($data_structure, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'data_structure', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['data_structure'] = $data_structure;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_access
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Access
     */
    public function getExternalAccess()
    {
        return $this->container['external_access'];
    }

    /**
     * Sets external_access
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Access $external_access
     * @return $this
     */
    public function setExternalAccess($external_access)
    {
        $this->container['external_access'] = $external_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sphereon\SDK\Blockchain\Easy\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sphereon\SDK\Blockchain\Easy\ObjectSerializer::sanitizeForSerialization($this));
    }
}


