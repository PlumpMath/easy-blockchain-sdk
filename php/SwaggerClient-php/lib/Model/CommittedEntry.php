<?php
/**
 * CommittedEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Easy
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Easy\Model;

use \ArrayAccess;

/**
 * CommittedEntry Class Doc Comment
 *
 * @category    Class
 * @description Commited Entry
 * @package     Sphereon\SDK\Blockchain\Easy
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CommittedEntry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CommittedEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'entry' => '\Sphereon\SDK\Blockchain\Easy\Model\Entry',
        'chain_id' => 'string',
        'raw_backend_structures' => '\Sphereon\SDK\Blockchain\Easy\Model\RawBackendStructure[]',
        'entry_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'entry' => null,
        'chain_id' => null,
        'raw_backend_structures' => null,
        'entry_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'entry' => 'entry',
        'chain_id' => 'chainId',
        'raw_backend_structures' => 'rawBackendStructures',
        'entry_id' => 'entryId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'entry' => 'setEntry',
        'chain_id' => 'setChainId',
        'raw_backend_structures' => 'setRawBackendStructures',
        'entry_id' => 'setEntryId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'entry' => 'getEntry',
        'chain_id' => 'getChainId',
        'raw_backend_structures' => 'getRawBackendStructures',
        'entry_id' => 'getEntryId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entry'] = isset($data['entry']) ? $data['entry'] : null;
        $this->container['chain_id'] = isset($data['chain_id']) ? $data['chain_id'] : null;
        $this->container['raw_backend_structures'] = isset($data['raw_backend_structures']) ? $data['raw_backend_structures'] : null;
        $this->container['entry_id'] = isset($data['entry_id']) ? $data['entry_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets entry
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Entry
     */
    public function getEntry()
    {
        return $this->container['entry'];
    }

    /**
     * Sets entry
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Entry $entry
     * @return $this
     */
    public function setEntry($entry)
    {
        $this->container['entry'] = $entry;

        return $this;
    }

    /**
     * Gets chain_id
     * @return string
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     * @param string $chain_id Chain ID
     * @return $this
     */
    public function setChainId($chain_id)
    {
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets raw_backend_structures
     * @return \Sphereon\SDK\Blockchain\Easy\Model\RawBackendStructure[]
     */
    public function getRawBackendStructures()
    {
        return $this->container['raw_backend_structures'];
    }

    /**
     * Sets raw_backend_structures
     * @param \Sphereon\SDK\Blockchain\Easy\Model\RawBackendStructure[] $raw_backend_structures Raw data structures of backend
     * @return $this
     */
    public function setRawBackendStructures($raw_backend_structures)
    {
        $this->container['raw_backend_structures'] = $raw_backend_structures;

        return $this;
    }

    /**
     * Gets entry_id
     * @return string
     */
    public function getEntryId()
    {
        return $this->container['entry_id'];
    }

    /**
     * Sets entry_id
     * @param string $entry_id Entry ID
     * @return $this
     */
    public function setEntryId($entry_id)
    {
        $this->container['entry_id'] = $entry_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sphereon\SDK\Blockchain\Easy\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sphereon\SDK\Blockchain\Easy\ObjectSerializer::sanitizeForSerialization($this));
    }
}


