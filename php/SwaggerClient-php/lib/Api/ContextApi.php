<?php
/**
 * ContextApi
 * PHP version 5
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Easy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy Blockchain API
 *
 * <b>The Easy Blockchain API is an easy to use API to store entries within chains. Currently it stores entries using the bitcoin blockchain by means of Factom or Multichain. The latter also allows for a private blockchain. In the future other solutions will be made available</b>    The flow is generally as follows:  1. Make sure a context is available using the / POST endpoint. Normally you only need one context. This is the place where backend providers and blockchain implementations are being specified.  2. Make sure a chain has been created using the /chain POST endpoint. Normally you only need one or a handful of chains. This is a relative expensive operation.  3. Store entries on the chain from step 2. The entries will contain the content and metadata you want to store forever on the specified chain.  4. Retrieve an existing entry from the chain to verify or retrieve data      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 0.9
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sphereon\SDK\Blockchain\Easy\Api;

use \Sphereon\SDK\Blockchain\Easy\ApiClient;
use \Sphereon\SDK\Blockchain\Easy\ApiException;
use \Sphereon\SDK\Blockchain\Easy\Configuration;
use \Sphereon\SDK\Blockchain\Easy\ObjectSerializer;

/**
 * ContextApi Class Doc Comment
 *
 * @category Class
 * @package  Sphereon\SDK\Blockchain\Easy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContextApi
{
    /**
     * API Client
     *
     * @var \Sphereon\SDK\Blockchain\Easy\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Sphereon\SDK\Blockchain\Easy\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Sphereon\SDK\Blockchain\Easy\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Sphereon\SDK\Blockchain\Easy\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Sphereon\SDK\Blockchain\Easy\ApiClient $apiClient set the API client
     *
     * @return ContextApi
     */
    public function setApiClient(\Sphereon\SDK\Blockchain\Easy\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createBackend
     *
     * Create a new backend
     *
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Backend $backend backend (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Backend
     */
    public function createBackend($backend)
    {
        list($response) = $this->createBackendWithHttpInfo($backend);
        return $response;
    }

    /**
     * Operation createBackendWithHttpInfo
     *
     * Create a new backend
     *
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Backend $backend backend (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of \Sphereon\SDK\Blockchain\Easy\Model\Backend, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBackendWithHttpInfo($backend)
    {
        // verify the required parameter 'backend' is set
        if ($backend === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend when calling createBackend');
        }
        // parse inputs
        $resourcePath = "/blockchain/easy/0.9/backends";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // body params
        $_tempBody = null;
        if (isset($backend)) {
            $_tempBody = $backend;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sphereon\SDK\Blockchain\Easy\Model\Backend',
                '/blockchain/easy/0.9/backends'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sphereon\SDK\Blockchain\Easy\Model\Backend', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Backend', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Backend', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createContext
     *
     * Create a new context
     *
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Context $context context (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Context
     */
    public function createContext($context)
    {
        list($response) = $this->createContextWithHttpInfo($context);
        return $response;
    }

    /**
     * Operation createContextWithHttpInfo
     *
     * Create a new context
     *
     * @param \Sphereon\SDK\Blockchain\Easy\Model\Context $context context (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of \Sphereon\SDK\Blockchain\Easy\Model\Context, HTTP status code, HTTP response headers (array of strings)
     */
    public function createContextWithHttpInfo($context)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling createContext');
        }
        // parse inputs
        $resourcePath = "/blockchain/easy/0.9/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json;charset=UTF-8']);

        // body params
        $_tempBody = null;
        if (isset($context)) {
            $_tempBody = $context;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sphereon\SDK\Blockchain\Easy\Model\Context',
                '/blockchain/easy/0.9/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sphereon\SDK\Blockchain\Easy\Model\Context', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Context', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Context', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBackend
     *
     * Delete backend by id (not by ledgername)
     *
     * @param string $backend_id backendId (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return void
     */
    public function deleteBackend($backend_id)
    {
        list($response) = $this->deleteBackendWithHttpInfo($backend_id);
        return $response;
    }

    /**
     * Operation deleteBackendWithHttpInfo
     *
     * Delete backend by id (not by ledgername)
     *
     * @param string $backend_id backendId (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBackendWithHttpInfo($backend_id)
    {
        // verify the required parameter 'backend_id' is set
        if ($backend_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend_id when calling deleteBackend');
        }
        // parse inputs
        $resourcePath = "/blockchain/easy/0.9/backends/{backendId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($backend_id !== null) {
            $resourcePath = str_replace(
                "{" . "backendId" . "}",
                $this->apiClient->getSerializer()->toPathValue($backend_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/blockchain/easy/0.9/backends/{backendId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findBackends
     *
     * Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Backend[]
     */
    public function findBackends($backend_id, $include_public = 'false')
    {
        list($response) = $this->findBackendsWithHttpInfo($backend_id, $include_public);
        return $response;
    }

    /**
     * Operation findBackendsWithHttpInfo
     *
     * Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of \Sphereon\SDK\Blockchain\Easy\Model\Backend[], HTTP status code, HTTP response headers (array of strings)
     */
    public function findBackendsWithHttpInfo($backend_id, $include_public = 'false')
    {
        // verify the required parameter 'backend_id' is set
        if ($backend_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend_id when calling findBackends');
        }
        // parse inputs
        $resourcePath = "/blockchain/easy/0.9/backends/{backendId}/find";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_public !== null) {
            $queryParams['includePublic'] = $this->apiClient->getSerializer()->toQueryValue($include_public);
        }
        // path params
        if ($backend_id !== null) {
            $resourcePath = str_replace(
                "{" . "backendId" . "}",
                $this->apiClient->getSerializer()->toPathValue($backend_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sphereon\SDK\Blockchain\Easy\Model\Backend[]',
                '/blockchain/easy/0.9/backends/{backendId}/find'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sphereon\SDK\Blockchain\Easy\Model\Backend[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Backend[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBackend
     *
     * Get existing backend by id (not by ledgername). Optionally including public backend of others
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Backend
     */
    public function getBackend($backend_id, $include_public = 'false')
    {
        list($response) = $this->getBackendWithHttpInfo($backend_id, $include_public);
        return $response;
    }

    /**
     * Operation getBackendWithHttpInfo
     *
     * Get existing backend by id (not by ledgername). Optionally including public backend of others
     *
     * @param string $backend_id backendId (required)
     * @param bool $include_public includePublic (optional, default to false)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of \Sphereon\SDK\Blockchain\Easy\Model\Backend, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBackendWithHttpInfo($backend_id, $include_public = 'false')
    {
        // verify the required parameter 'backend_id' is set
        if ($backend_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $backend_id when calling getBackend');
        }
        // parse inputs
        $resourcePath = "/blockchain/easy/0.9/backends/{backendId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($include_public !== null) {
            $queryParams['includePublic'] = $this->apiClient->getSerializer()->toQueryValue($include_public);
        }
        // path params
        if ($backend_id !== null) {
            $resourcePath = str_replace(
                "{" . "backendId" . "}",
                $this->apiClient->getSerializer()->toPathValue($backend_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sphereon\SDK\Blockchain\Easy\Model\Backend',
                '/blockchain/easy/0.9/backends/{backendId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sphereon\SDK\Blockchain\Easy\Model\Backend', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Backend', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContext
     *
     * Get an existing context
     *
     * @param string $context context (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Context
     */
    public function getContext($context)
    {
        list($response) = $this->getContextWithHttpInfo($context);
        return $response;
    }

    /**
     * Operation getContextWithHttpInfo
     *
     * Get an existing context
     *
     * @param string $context context (required)
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of \Sphereon\SDK\Blockchain\Easy\Model\Context, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContextWithHttpInfo($context)
    {
        // verify the required parameter 'context' is set
        if ($context === null) {
            throw new \InvalidArgumentException('Missing the required parameter $context when calling getContext');
        }
        // parse inputs
        $resourcePath = "/blockchain/easy/0.9/{context}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($context !== null) {
            $resourcePath = str_replace(
                "{" . "context" . "}",
                $this->apiClient->getSerializer()->toPathValue($context),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sphereon\SDK\Blockchain\Easy\Model\Context',
                '/blockchain/easy/0.9/{context}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sphereon\SDK\Blockchain\Easy\Model\Context', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Context', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listBackends
     *
     * List existing backends.
     *
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return \Sphereon\SDK\Blockchain\Easy\Model\Backend[]
     */
    public function listBackends()
    {
        list($response) = $this->listBackendsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listBackendsWithHttpInfo
     *
     * List existing backends.
     *
     * @throws \Sphereon\SDK\Blockchain\Easy\ApiException on non-2xx response
     * @return array of \Sphereon\SDK\Blockchain\Easy\Model\Backend[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listBackendsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/blockchain/easy/0.9/backends";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json;charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sphereon\SDK\Blockchain\Easy\Model\Backend[]',
                '/blockchain/easy/0.9/backends'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sphereon\SDK\Blockchain\Easy\Model\Backend[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\Backend[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sphereon\SDK\Blockchain\Easy\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
