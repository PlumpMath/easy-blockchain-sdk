/* 
 * Easy Blockchain API
 *
 * The Easy Blockchain API is an easy to use API to store related entries within chains. Currently it stores entries using a Factom, Ethereum or Multichain blockchain.   For full API documentation please visit: https://docs.sphereon.com/api/easy-blockchain/0.10/html   Interactive testing: A web based test console is available in the Sphereon API store at: https://store.sphereon.com
 *
 * OpenAPI spec version: 0.10
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Blockchain.Easy.Client;
using Sphereon.SDK.Blockchain.Easy.Model;

namespace Sphereon.SDK.Blockchain.Easy.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackendApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new backend
        /// </summary>
        /// <remarks>
        /// Create a new backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backend">backend</param>
        /// <returns>Backend</returns>
        Backend CreateBackend (Backend backend);

        /// <summary>
        /// Create a new backend
        /// </summary>
        /// <remarks>
        /// Create a new backend
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backend">backend</param>
        /// <returns>ApiResponse of Backend</returns>
        ApiResponse<Backend> CreateBackendWithHttpInfo (Backend backend);
        /// <summary>
        /// Delete a backend
        /// </summary>
        /// <remarks>
        /// Delete backend by id (not by ledgername)
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>Backend</returns>
        Backend DeleteBackend (string backendId);

        /// <summary>
        /// Delete a backend
        /// </summary>
        /// <remarks>
        /// Delete backend by id (not by ledgername)
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>ApiResponse of Backend</returns>
        ApiResponse<Backend> DeleteBackendWithHttpInfo (string backendId);
        /// <summary>
        /// Find backends
        /// </summary>
        /// <remarks>
        /// Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>List&lt;Backend&gt;</returns>
        List<Backend> FindBackends (string backendId, bool? includePublic = null);

        /// <summary>
        /// Find backends
        /// </summary>
        /// <remarks>
        /// Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Backend&gt;</returns>
        ApiResponse<List<Backend>> FindBackendsWithHttpInfo (string backendId, bool? includePublic = null);
        /// <summary>
        /// Get backend
        /// </summary>
        /// <remarks>
        /// Get existing backend by id (not by ledgername). Optionally including public backend of others
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>Backend</returns>
        Backend GetBackend (string backendId, bool? includePublic = null);

        /// <summary>
        /// Get backend
        /// </summary>
        /// <remarks>
        /// Get existing backend by id (not by ledgername). Optionally including public backend of others
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>ApiResponse of Backend</returns>
        ApiResponse<Backend> GetBackendWithHttpInfo (string backendId, bool? includePublic = null);
        /// <summary>
        /// List backends
        /// </summary>
        /// <remarks>
        /// List existing backends.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Backend&gt;</returns>
        List<Backend> ListBackends ();

        /// <summary>
        /// List backends
        /// </summary>
        /// <remarks>
        /// List existing backends.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Backend&gt;</returns>
        ApiResponse<List<Backend>> ListBackendsWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BackendApi : IBackendApi
    {
        private Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BackendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BackendApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackendApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BackendApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Blockchain.Easy.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Blockchain.Easy.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new backend Create a new backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backend">backend</param>
        /// <returns>Backend</returns>
        public Backend CreateBackend (Backend backend)
        {
             ApiResponse<Backend> localVarResponse = CreateBackendWithHttpInfo(backend);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new backend Create a new backend
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backend">backend</param>
        /// <returns>ApiResponse of Backend</returns>
        public ApiResponse< Backend > CreateBackendWithHttpInfo (Backend backend)
        {
            // verify the required parameter 'backend' is set
            if (backend == null)
                throw new ApiException(400, "Missing required parameter 'backend' when calling BackendApi->CreateBackend");

            var localVarPath = "/backends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (backend != null && backend.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(backend); // http body (model) parameter
            }
            else
            {
                localVarPostBody = backend; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Backend>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Backend) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Backend)));
        }

        /// <summary>
        /// Delete a backend Delete backend by id (not by ledgername)
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>Backend</returns>
        public Backend DeleteBackend (string backendId)
        {
             ApiResponse<Backend> localVarResponse = DeleteBackendWithHttpInfo(backendId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a backend Delete backend by id (not by ledgername)
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <returns>ApiResponse of Backend</returns>
        public ApiResponse< Backend > DeleteBackendWithHttpInfo (string backendId)
        {
            // verify the required parameter 'backendId' is set
            if (backendId == null)
                throw new ApiException(400, "Missing required parameter 'backendId' when calling BackendApi->DeleteBackend");

            var localVarPath = "/backends/{backendId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (backendId != null) localVarPathParams.Add("backendId", Configuration.ApiClient.ParameterToString(backendId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Backend>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Backend) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Backend)));
        }

        /// <summary>
        /// Find backends Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>List&lt;Backend&gt;</returns>
        public List<Backend> FindBackends (string backendId, bool? includePublic = null)
        {
             ApiResponse<List<Backend>> localVarResponse = FindBackendsWithHttpInfo(backendId, includePublic);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find backends Find existing backend(s) by id (single result) and/or ledgername (multiple results). Optionally including public backends of others
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;Backend&gt;</returns>
        public ApiResponse< List<Backend> > FindBackendsWithHttpInfo (string backendId, bool? includePublic = null)
        {
            // verify the required parameter 'backendId' is set
            if (backendId == null)
                throw new ApiException(400, "Missing required parameter 'backendId' when calling BackendApi->FindBackends");

            var localVarPath = "/backends/{backendId}/find";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (backendId != null) localVarPathParams.Add("backendId", Configuration.ApiClient.ParameterToString(backendId)); // path parameter
            if (includePublic != null) localVarQueryParams.Add("includePublic", Configuration.ApiClient.ParameterToString(includePublic)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindBackends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Backend>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Backend>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Backend>)));
        }

        /// <summary>
        /// Get backend Get existing backend by id (not by ledgername). Optionally including public backend of others
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>Backend</returns>
        public Backend GetBackend (string backendId, bool? includePublic = null)
        {
             ApiResponse<Backend> localVarResponse = GetBackendWithHttpInfo(backendId, includePublic);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get backend Get existing backend by id (not by ledgername). Optionally including public backend of others
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="backendId">backendId</param>
        /// <param name="includePublic">includePublic (optional, default to false)</param>
        /// <returns>ApiResponse of Backend</returns>
        public ApiResponse< Backend > GetBackendWithHttpInfo (string backendId, bool? includePublic = null)
        {
            // verify the required parameter 'backendId' is set
            if (backendId == null)
                throw new ApiException(400, "Missing required parameter 'backendId' when calling BackendApi->GetBackend");

            var localVarPath = "/backends/{backendId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (backendId != null) localVarPathParams.Add("backendId", Configuration.ApiClient.ParameterToString(backendId)); // path parameter
            if (includePublic != null) localVarQueryParams.Add("includePublic", Configuration.ApiClient.ParameterToString(includePublic)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBackend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Backend>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Backend) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Backend)));
        }

        /// <summary>
        /// List backends List existing backends.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Backend&gt;</returns>
        public List<Backend> ListBackends ()
        {
             ApiResponse<List<Backend>> localVarResponse = ListBackendsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List backends List existing backends.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Blockchain.Easy.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Backend&gt;</returns>
        public ApiResponse< List<Backend> > ListBackendsWithHttpInfo ()
        {

            var localVarPath = "/backends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBackends", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Backend>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Backend>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Backend>)));
        }

    }
}
